#+STARTUP: content
#+AUTHOR: Troy Hinckley
#+HUGO_BASE_DIR: .

* Main
  :PROPERTIES:
  :EXPORT_HUGO_SECTION: .
  :END:

** DONE [#B] About
:PROPERTIES:
:EXPORT_FILE_NAME: about
:END:

I am an engineer with interests in Emacs, Programming languages, performance, and compilers. Currently working in hardware design at Intel in Colorado.

* Posts
  :PROPERTIES:
  :EXPORT_HUGO_SECTION: post
  :END:

** DONE Using org mode to write email for outlook :org_mode:emacs:
:PROPERTIES:
:EXPORT_DATE: 2019-02-08
:EXPORT_FILE_NAME: outlook-email-in-org-mode
:END:
I see many threads on Reddit and blog posts about using email inside Emacs. I mean, I already have =org-mode= which organizing my whole digital life. But then all my work email is provided through outlook, which does not allow me to fetch email with anything other then their proprietary software.

Microsoft outlooked was designed to be used by people writing marketing emails, not people talking about code. There is no way to distinguish what is code from what is text, or call our programming symbols from the rest of the prose. Emacs =org-mode= on the other hand, was built for working in a technical environment.

Thankfully org makes it easy to export any heading to HTML. The hard part is getting that HTML into outlook. Most of the ideas presented here were taken this [[http://bnbeckwith.com/blog/org-mode-to-outlook.html][post]], and then expanded on.

The process I use to write my email with =org-mode= is as follows
1. write the email in an org capture buffer
2. Use a custom function to copy the exported HTML to the clipboard
3. go to outlook and use a custom VBA function to insert the HTML from
   the clipboard as formatted text

*** Setting up Emacs
**** Using an org capture buffer
Using an org capture buffer is perfect for writing email, because I can save it as a draft if needed, or export the contents and then throw the buffer away. Also, most of the time, the content of interest is what I am working on that moment, so I have everything at hand. Here is the simple template that I use to write emails.
#+BEGIN_SRC emacs-lisp -n
  (add-to-list
   'org-capture-templates
   '("e" "Email"
     entry (expand-file-name "email.org" org-directory)
     "* %?" :empty-lines 1))
#+END_SRC

**** Exporting from org-mode
Normally if you wanted to export an org header as HTML, you would use =C-c C-e= to open the export menu. =hH= will open a dedicated buffer with the HTML contents of your org file. From there you can copy the whole buffer. However I find it much faster to use this helper function (bound to =C-x M-e=).

#+BEGIN_SRC emacs-lisp +n
  (defun export-org-email ()
    "Export the current email org buffer and copy it to the
  clipboard"
    (interactive)
    (let ((org-export-show-temporary-export-buffer nil)
          (org-html-head (org-email-html-head)))
      (org-html-export-as-html)
      (with-current-buffer "*Org HTML Export*"
        (kill-new (buffer-string)))
      (message "HTML copied to clipboard")))
#+END_SRC

**** Better CSS for export
The default HTML exported by org is spartan to say the least. Thankfully it is pretty easy to define some custom to CSS that looks prettier and plays nicer with outlooks HTML rendering engine. The outlook compatible HTML I use is located [[https://github.com/CeleritasCelery/org-html-themes/blob/master/styles/email/css/email.css][here]]. The function below adds my CSS to =org-html-head=. It is called by =export-org-email= from the previous section.

As you can see in the function below, I have this CSS at the local path =~/org/org-html-themes/styles/email/css/email.css=. You will need to change this to where ever you keep the CSS file.
#+BEGIN_SRC emacs-lisp +n
  (defun org-email-html-head ()
    "Create the header with CSS for use with email"
    (concat
     "<style type=\"text/css\">\n"
     "<!--/*--><![CDATA[/*><!--*/\n"
     (with-temp-buffer
       (insert-file-contents
        "~/org/org-html-themes/styles/email/css/email.css")
       (buffer-string))
     "/*]]>*/-->\n"
     "</style>\n"))
#+END_SRC

*** setting up outlook
**** Getting the HTML into outlook
This is the tricky part. outlook does not make it easy to insert HTML inline. I had to learn some VBA and use the outlook code editor. I hope I never have to do that again.

To add a function to outlook
1. Press =Alt-F11= to bring up the VBA editor.
2. You should see the default project. Change this project name to something more appropriate. Note that the Project name *MUST NOT* be the name of the function (~PrependClipboardHTML~) so name it something else.
3. Right click on the project to add a new module and copy in the function from below

#+BEGIN_SRC vb
Sub PrependClipboardHTML()
    Dim email As Outlook.MailItem
    Dim cBoard As DataObject

    Set email = Application.ActiveInspector.CurrentItem
    Set cBoard = New DataObject

    cBoard.GetFromClipboard
    email.HTMLBody = cBoard.GetText + email.HTMLBody

    Set cBoard = Nothing
    Set email = Nothing
End Sub
#+END_SRC

**** Fix object library
This step may not apply to everyone, but in order to get this to work, I also had to add the =Microsoft Forms 2.0 Object Library= to the References. I figured this out by looking at [[https://www.reddit.com/r/orgmode/comments/74k2mx/org_link_to_message_within_outlook_2016/][this]] Reddit thread.

1. Click on =Tools= in the menu bar (or use =Alt-t=).
2. Select =References...=
3. Select =Browse...=
4. Browse to =C:\Windows\System32\FM20.DLL= and select open

**** Add to Quick Access Toolbar
This function only makes sense in context of an email. To enable it there, add it to the quick access toolbar at the top.

1. Press =Ctrl-n= to open up a new email.
2. Select the little down arrow at the very top for the =Customize Quick Access Toolbar= menu.
3. Select =More Commands=.
4. In the drop down for =choose commands from:= select =Macros=. You should see the =PrependClipboardHTML= macro you created here.
5. Add it to the right hand side pane with the =Add >>= button.
6. Click on =Modify...= to change the icon and display name. You can also use the arrow to change the ordering in the =Quick Access Toolbar=

Now clicking on that button will copy clipboard contents into the email as HTML. Our raw HTML exported from Org mode gets inserted nicely and we gain the formatting desired.

The other bonus (or maybe the main point) is that now you can also use a built-in shorcut for the Quick Access Toolbar commands to run this one. By pressing =Alt=, you can see a number by your command.

**** Matching the default font in Outlook
It is nice sometimes to have the default font in outlook match what you are exporting from org mode. To make this happen, do the following steps in Outlook.

1. On the =File= tab, choose =Options= > =Mail=.
2. Under =Compose messages=, choose =Stationery and Fonts=.
3. On the =Personal Stationery= tab, under =New mail messages= or =Replying or forwarding messages=, choose Font.
4. In the =Font= box, choose the font, style, size, and color that you want to use. You can see a preview of your changes as you make them.
5. Choose =OK= three times to return to Outlook.

*** Bonus Content
Here are a few more ideas that are not necessary for this workflow but
are useful to me.

**** More advanced VBA
The =PrependClipboardHTML= function I showed above is not actually the version I use. But I chose to mention present it as the solution because it is simple and works well. This more advanced version has two differences

1. Works with inline email replies
2. If the subject line is empty, the HTML header at the start of the body is used as the subject line. This allows you add the subject line in org-mode and have it automatcially inserted.

#+BEGIN_SRC vb
  Sub PrependClipboardHTML()
      Dim email As Outlook.MailItem
      Dim cBoard As DataObject

      Set email = GetCurrentItem()
      Set cBoard = New DataObject

      cBoard.GetFromClipboard

      Dim sText As String
      Dim headerStart As Integer
      Dim headerStartClose As Integer
      Dim HTMLPre As String
      Dim HTMLPost As String
      Dim subject As String
      Dim paragraphStart As Integer

      Dim headerEndStr As String
      Const titleText = "<h1 class=""title"">"

      headerEndStr = "</h1>"
      headerStart = Len(titleText)

      sText = cBoard.GetText
      HTMLPre = sText

      headerStart = InStr(sText, titleText)
      If Not headerStart > 0 Then
          ' if no title text, we use the starting header
          headerStart = InStr(sText, "<h2 id=")
          headerEndStr = "</h2>"
      End If

      ' we use the first header as the subject line if the subject line is empty
      If headerStart > 0 Then
          headerStartClose = InStr(headerStart, sText, ">") + 1
          Dim headerEnd As Integer
          headerEnd = InStr(headerStartClose, sText, headerEndStr)
          If headerEnd > 0 Then
              subject = Mid(sText, _
                  headerStartClose, _
                  headerEnd - headerStartClose)
              HTMLPre = Mid(sText, 1, headerStart - 1) ' arrays start at 1...
              HTMLPost = Mid(sText, headerEnd + Len(headerEndStr))
          End If
      End If

      email.HTMLBody = HTMLPre + HTMLPost + email.HTMLBody
      ' only use the HTML subject if an email subject is absent
      If Len(email.subject) = 0 Then
          email.subject = subject
      End If

      ' deallocate objects
      Set cBoard = Nothing
      Set email = Nothing

  End Sub

  ' Get either the active email item or the current window
  Function GetCurrentItem() As Object
      Dim objApp As Outlook.Application

      Set objApp = Application

      On Error Resume Next
      Select Case TypeName(objApp.ActiveWindow)
          Case "Explorer"
              Set GetCurrentItem = objApp.ActiveExplorer.ActiveInlineResponse
          Case "Inspector"
              Set GetCurrentItem = objApp.activeInspector.CurrentItem
      End Select

      Set objApp = Nothing
  End Function
#+END_SRC
**** Normalize outlook formatting
Unless you disable it, outlook will try and "prettify" some characters as you type with non ascii-compatible versions. This means that you will often encounter errors when copying code out of outlook and trying to paste into a shell or source file. The following function takes the last paste normalizes it to be ascii compatible.

#+BEGIN_SRC emacs-lisp
  (defun normalize-text (beg end)
    "normalize characters used in Microsoft formatting"
    (let* ((orig-text (buffer-substring beg end))
           (normalized-text
            (thread-last orig-text
              (replace-regexp-in-string "–" "--")
              (replace-regexp-in-string (rx (char "‘’")) "'")
              (replace-regexp-in-string (rx (char "“”")) "\""))))
      (unless (equal orig-text normalized-text)
        (save-excursion
          (goto-char beg)
          (delete-region beg end)
          (insert normalized-text)))))

  (defun normalize-region (beg end)
    "normalize the last paste, or if region is selected, normalize
  that region."
    (interactive "r")
    (if (region-active-p)
        (progn (normalize-text beg end)
               (deactivate-mark))
      (apply #'normalize-text
             (cl-sort (list (point) (mark t)) '<))))
#+END_SRC
**** Have a comment?
View the discussion on [[https://www.reddit.com/r/emacs/comments/gxrg0b/writing_email_for_outlook_inside_emacs/?utm_source=share&utm_medium=web2x&context=3][Reddit]] or send me an email

** DONE Native shell completion in Emacs :shell:emacs:
:PROPERTIES:
:EXPORT_DATE: 2020-01-04
:EXPORT_FILE_NAME: native-shell-completion-in-emacs
:END:
I am obsessed with autocompletion in shell mode. Running a shell in ~shell-mode~ instead of a terminal emulator has so many advantages. You can treat the whole buffer just like a normal Emacs buffer. You can copy and paste and edit the line normally. You can hook it into native Emacs functionality. You can even [[https://github.com/riscy/shx-for-emacs][display images!]]

However there is one big disadvantage. You loose access to the state the shell. This means that you have to do tricks like ~shell-dirtrack-mode~ just to make sure you are in the right directory. It also means that all the native shell completions are not available. I have tried to approach this problem from multiple angles with packages like [[https://github.com/CeleritasCelery/company-fish][this]], [[https://github.com/CeleritasCelery/company-async-files][this]], and [[https://github.com/CeleritasCelery/company-arguments][this]]. (Yes, I have written a half dozen modes to try solve this.) The most popular package to try and solve this is [[https://github.com/szermatt/emacs-bash-completion][bash-shell-completion]]. However all these solutions have the same problem that they don't actually reflect the internal state of the shell, they are just close approximations.

But the shell knows its own state. In a normal terminal emulator, tab completion will give you access to it. When looking at my shell buffer, it seems that the information I want is just below the surface. If only there was some way to access it. I am not the only one who has had this thought. There is a [[https://stackoverflow.com/questions/163591/bash-autocompletion-in-emacs-shell-mode][stackoverflow]] with over 26,000 views asking this same question. But no one has managed to access the native tab completion before. So I determined to solve this once and for all.

*** The curious case of bash
If you use csh and send some text followed by the tab character, it will print out all possible completions. But not bash. Try this code and you get nothing.
#+BEGIN_SRC lisp
(comint-simple-send (get-buffer-process (current-buffer)) "git\t\x15")
#+END_SRC

This is a test
#+begin_src emacs-lisp
(message "Hello again x2")
#+end_src

It works in the terminal but not in the Emacs shell. What conspiracy is this? Turns out that Emacs and bash have put a lot of effort into making sure completion does not work. The first thing to notice is that ~explicit-bash-args~ contains the argument ~--no-editing~, which will disable readline completion. Let get rid of that shall we?
#+BEGIN_SRC lisp
  (setq explicit-bash-args
            (delete "--noediting" explicit-bash-args))
#+END_SRC

However removing that still does not enable tab completion. There must be something else going on here. This time it is on the bash side. Looking in the source code we see the follow block.
#+BEGIN_SRC c
  term = get_string_value ("TERM");
  emacs = get_string_value ("EMACS");
  inside_emacs = get_string_value ("INSIDE_EMACS");

  if (inside_emacs)
    {
      emacs_term = strstr (inside_emacs, ",term:") != 0;
      in_emacs = 1;
    }
   else if (emacs)
     {
       /* Infer whether we are in an older Emacs. */
       emacs_term = strstr (emacs, " (term:") != 0;
       in_emacs = emacs_term || STREQ (emacs, "t");
     }
   else
     in_emacs = emacs_term = 0;

  /* Not sure any emacs terminal emulator sets TERM=emacs any more */
  no_line_editing |= STREQ (term, "emacs");
  no_line_editing |= in_emacs && STREQ (term, "dumb");
#+END_SRC

For some reason that I can't explain, bash has special code for running inside Emacs. Lo and behold, if ~$TERM~ is ~dumb~ and ~$INSIDE_EMACS~ is set, then line editing is disabled by the shell itself. Any reason for this? I would love to know. Changing ~$TERM~ to something other then ~dumb~ fixes the issue, but then programs might not interpret our terminals capabilities correct. The best thing to do is remove the environment variable ~$INSIDE_EMACS~. Doesn't seem to do anything useful after all.
#+BEGIN_SRC lisp
(advice-add 'comint-term-environment
            :filter-return (lambda (env) (cons "INSIDE_EMACS" env)))
#+END_SRC

And with that we have working tab completion in bash!

*** Making completion "Emacsy"
We could stop here and just create a function to send tab to the underlying process. It would behave exactly like the terminal does. But this is Emacs. The whole reason we are using ~shell-mode~ in the first place is because things in Emacs are nicer then things in the terminal. We have things like ~completion-at-point~ and ~company-mode~ that would make a terminal emulators head spin. Makes sense to take advantage of that. So I created a new package called [[https://github.com/CeleritasCelery/emacs-native-shell-complete][native-complete]] that talks to the underlying process and gets the actual completions that the shell would natively provide. No more trying to use other packages to /guess/ the shells state, or starting another process that may be out of sync. It even supports invoking subshells! This effort is still work in progress, and many shells have yet to be tested. As with many things, it is not as simple in the implementation as it should be.

I hope this is the shell-mode completion Endgame. I don't think I can take much more.

**** Have a comment?
View the discussion on [[https://www.reddit.com/r/emacs/comments/ek8v0e/native_shell_completion_in_emacs/?utm_source=share&utm_medium=web2x&context=3][Reddit]] or send me an email
** DONE [#B] When pure function lie :design:emacs:
:PROPERTIES:
:EXPORT_DATE: 2021-04-07
:EXPORT_FILE_NAME: when-pure-functions-lie
:END:
Here is a simple question. Given the lisp function below (and that the function is not advised) what will the output be of ~(foo)~?
#+begin_src emacs-lisp
  (defun foo ()
    "foo")
#+end_src

Seems pretty simple right? How could the answer be anything other then ~"foo"~? It is just returning a constant string. Or is it? The real answer to this question is...

We have no idea. It can could be any string of length 3.

How can this be? Well it turns out that constant literals in lisp (common lisp, emacs lisp, etc) are not constant. They can be modified at runtime like any other variable. Here is an elisp example that does just that.
#+begin_src emacs-lisp
  (defun foo ()
    "foo")

  (foo) => "foo"

  (defun bar ()
    (let ((x (foo)))
      (aset x 0 ?福)
      x))

  (bar) => "福oo"
  (foo) => "福oo"
#+end_src

Look at that! We have modified the behavior of another function using only its return value. We might have considered ~foo~ a [[https://en.wikipedia.org/wiki/Pure_function][pure function]]. However this cannot be the case because we can return different values for the same input.

This is true whether it's dynamic or lexically bound, interpreted or byte compiled. And there is no way to get the original literal value back without redefining the function. Which means that once you try and instrument the function to see what is going on, the problem magically goes away! Here is another example where we are able to change a different constant literal in the same function. Since ~foo~ is byte-compiled, the two constants are mapped to the same mutable object. So changing one changes the other!
  #+begin_src emacs-lisp
    (defvar global)

    (byte-compile
     (defun foo (x)
       (setq global "foo")
       (concat "foo" x)))

    (foo "bar") => "foobar"

    (aset global 2 ?x)

    (foo "bar") => "foxbar"
#+end_src

*** Why does this happen?
Strings in lisp are mutable, and when you pass a string to something it actually passes a reference to it. But once you have a reference to a string, you can modify it however you want. Which means that you are modifying the original string that was part of the constant list of the function!

As far as I could find, this behavior is unique to lisp (and it works with literal lists and vectors as well). Other dynamic languages don't have this property. For example, the python code below does not change the original list.
#+begin_src python
  def foo():
      return [1, 2, 3]

  def bar():
      x = foo()
      x[0] = 0
      return x

  print(foo()) => [1, 2, 3]
  print(bar()) => [0, 2, 3]
  print(foo()) => [1, 2, 3]
#+end_src

But the elisp version will
#+begin_src emacs-lisp
  (defun foo ()
    '[1 2 3])

  (defun bar ()
    (let ((x (foo)))
      (aset x 0 0)
      x))

  (foo) => [1 2 3]
  (bar) => [0 2 3]
  (foo) => [0 2 3]
#+end_src

I would venture to say that anytime you overwrite a constant literal it almost certainly a bug. And a very hard to debug one at that! So why does lisp allow this? I imagine a large part of it is simplifying the implementation. You don't have to check if the value you are modifying is constant or not, you just mutate it. Another part of it is that Common Lisp was conceived in a time when string where just vectors of ascii characters (Similar to C). That made modifying them like modifying normal arrays. But now with the advent of unicode, changing a "character" of string is not so easy. It can involve shifting the entire string or even reallocating depending on the size of the code point. This is why most modern languages have immutable strings by default.

This is another reason that it is hard to make a true multi-threaded elisp. You can't share function between threads when "normal" code can change the behavior of functions being used in different threads. Functions that look pure might be changing under the hood. In this situation you are cross-pollinating your code with mutable data. I should add that this really has nothing to do with [[https://en.wikipedia.org/wiki/Homoiconicity][homoiconicity]]. You could still have a fully homoiconic language without the ability to overwrite constant literals.

When I first saw this behavior, I thought for sure that I found a bug in the language implementation. This couldn't possibly be intentional. But after investigating more, I found that this was expected... at least if you are lisp programmer.
****  Have a comment?
View the discussion on [[https://www.reddit.com/r/emacs/comments/mm70re/when_pure_functions_lie/?utm_source=share&utm_medium=web2x&context=3][Reddit]] or send me an email
** TODO [#B] compilation mode on steroids
=compile.el= is a built-in package for Emacs that Let's you run
compilations in special dedicated mode. For example, if we wanted to
run make on a project, we would call ~M-x compile~ and it would
display a command prompt which conveniently defaults to "make -k". We
could use to run other commands as well, such as ~g++~, ~go~, or
~javac~. Basically anything that you can run from the command line,
you can run in compile mode.

Once you launch the command, compile opens a new popup window that
shows the commands progress. It actively scans for errors using a
builtin list and reports the total error count in the mode line. At
any time you can navigate to an error and use ="RET"= to jump to the
file. It works great with almost no configuration for the majority of
cases.

My builds, however, are more complicated. I use a proprietary set of
build tools that might run for over 10 hours. None of the standard
error parsing regex applied to me. Since my builds take so long, I
would often have up to a dozen builds running at once. There are also
several different types of builds that need to run particular order,
assuming the previous stage passed. On top of that, some of the builds
would stall and wait for user input forever. The compilation system as
it currently stands required too much micro management and was not
powerful enough to support my workflow. So for a long time, I managed
all my builds from command line, But this was also a very slow
workflow. So I decided to investigate what compile.el could do for me.
Eventually I was able to create a workflow with smart command
dispatching, command queuing, and a compilation status popup.

Before I get started let me just say that since all my build commands
are proprietary, There is little value in showing the actual arguments
and commands used. I think that would just create additional noise
anyway, so I am replacing all of that with sudo code. It should make
it easier to adapt this workflow to your needs.

*** dispatching commands
     My first issue was that I was frequently changing the commands
     line arguments. This would require me to

*** error parsing

*** detecting stalls

*** the command queue

*** alerts when a command finishes

*** the status window

*** log file mode

** TODO [#B] Emacs in 10 years
Emacs is the editor of a lifetime. It has been around more then 40 years, and I hope it will be around another 40. There are so many editors that come in with new tech and fancy features, but within a decade or two. But I hopefully will be able to use Emacs for the rest of my life. The editor is always adapting and changing. Here I put down some of my thoughts on what I hope the future of Emacs holds, and also what I hope it does not.
*** GUI first, Terminal second
Like many old applications, Emacs started in the terminal and that is where it takes it roots. This was the only option before the advent of GUI's. And even after graphical interfaces became popular there were still so many advantages to running in a simple terminal environment. But times have changed and there are now many advantges to using Emacs as GUI.  There is a popular [[https://blog.aaronbieber.com/2016/12/29/don-t-use-terminal-emacs.html][article]] by Aaron Bieber that explains some of the reasons, so I won't reiterate those here. But I hope the future of Emacs is focused on GUI first, Terimal second. You can already see this happening with things like Harbuff and better ~pixel-scroll-mode~ support being added to Emacs 27.
**** scrolling and cursor stays put
Scrolling in Emacs has always felt awkward compared to what you would get in a normal gui application. For one thing, you cannot scroll a window without also moving the cursor. And there is no easy way to get the cursor back unless you remembered to set a mark first. This need not be.

**** draw a window anywhere
If you want to do a fully stylized popup you need to either use an overlay or a child frame. Overlays have the limitation that they cannot cross window boundaries and only work with monospaced fonts. Using frames means you popup is dependent on your window manager. For me this means that every time I show or hide a child frame it flashes white before it redraws, leading to a very jarring experience. Emacs should be able to draw a floating window anywhere in the frame that can be used to tool-tips, completion, or anything else.
**** give me back my keys!
For historical reasons, terminals treat many different keybindings as the same. For example in a terminal emulator =C-j= and =C-m= are  =<return>=, =C-i= is =<tab>=, =C-[= is ~<esc>~, etc. Emacs carries these same terminal mappings into the GUI, even though the GUI can distinguish these keys. Fixing this requires some [[https://emacs.stackexchange.com/questions/220/how-to-bind-c-i-as-different-from-tab/221#221][voodoo]] with ~input-decode-map~. The GUI version of emacs should distinguish these keys, but for compatibility they could be bound to the same function by default. But that makes it easy for users to rebind them if needed.
*** Better buffer model
**** Long lines
A common pain point with Emacs is handling files with long lines. There is a [[https://www.emacswiki.org/emacs/SoLong][new package]] in Emacs 27 that will check for long lines in a file and disable features if they are over a certain length. But this still does not get to the heart of the problem. There is a whole [[https://github.com/codygman/figure-out-emacs-long-lines-issue/blob/master/figuring-out-emacs-display-issues.org][github repo]] dedicated to trying to solve this issue. However it looks like it would need a complete rework of the Emacs buffer model.
**** Code folding
If you try and fold more then a few thousand lines Emacs will slow to a crawl. Vim and sublime can handle this fine, and many users of those editors will enable folding by default. But in Emacs that is a time bomb waiting to happen. This seems related to the work Emacs has to do every time you move the cursor. I have never been able to find a mode (including ~set-selective-display~) That is performant on large files. And large files it where you need folding the most.
*** modern runtime
**** jit compiler
There have been several attempts to create a JIT compiler for Emacs with the most [[https://lists.gnu.org/archive/html/emacs-devel/2018-08/msg00393.html][recent]] one being back in 2018. JIT stands for "Just in Time" compiler that will interprent new code straight byte-code. Currently byte code is only created if you explicityly byte-compile a function or file. This is a feature of many modern dynamic languages and could greatly improve the performance of evaluated elips code.
**** byte code optimization
Steve Yegge has a very interesting talk entitled [[http://steve-yegge.blogspot.com/2008/05/dynamic-languages-strike-back.html][Dynamic Languages Strike Back]] where he outlines some of the interesting advantages dynamic languages have over static ones. This advantage comes down to dynamic languages having a runtime process that optimize things on the fly, whereas a static language has to know everything at compile time. For example There is the concept of Trace Trees, where the runtime examines "hotspots" in the code and applies heavy optmiization to the most executed branches of that. This includes things like inlining function calls, tail call optimization, and caching values. There are a lot of really cool things that can happen with runtime environement like emacs.
Trace trees, tail call, string interning, inlining
fib(40) in python : 34
fib(40) in emacs : 131
fib(40) in c: 0.6 seconds
almost 4x worse performace
**** not stop-the-world GC
GC is a huge part of the total cost

53 seconds of GC.
13261 collections
40% of it is GC
**** make sure not to loose introspection

**** reader macros

http://xkcd.com/1638/

="\\`\\\\\\(\\(a\\|b\\|c\\)\\(d\\|e\\)\\\\)\\'"=
=r"\`\\((a|b|c)(d|e)\)\'"=

="\\(\\`\\|[^\\]\\)\\(\\\\\\\\\\)*\\(\\\\\\?\\)\\'"=
=r"(\`|[^\])(\\\\\)*(\\\?)\'"=

**** move c code to elisp
Example of line numbers

*** What I hope the future does not hold

**** concurency
Leads to sloppy code
there is a lot of headroom on in the single threaded space.
Maybe limit it to font locking and buffer refresh

**** first class extension languages
Vim and neovim can do this.

Those languages will fade. Emacs is the editor of a life time, it needs to stick around. And be comptaible long after those languages are gone.

no brow

****  browser in emacs
*** conclusion
Make sure that you praise it. Excited.

=C-c C-f=
** TODO [#B] Thoughts on Garbage collection in Emacs
What could we do with a generational garbage collector?
Be cool to create some graphs
** TODO [#B] Trace trees
Explain what trace trees are and why they are so cool
